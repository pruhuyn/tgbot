import asyncio
import os
from aiogram import Bot, Dispatcher, types
from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy

# Flask –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'  # –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
db = SQLAlchemy(app)

# –ú–æ–¥–µ–ª—å User –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)

    def __repr__(self):
        return f'<User {self.username}>'

# Telegram bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞! –î–æ–±–∞–≤—å –µ–≥–æ –≤ Railway.")
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞
logged_in_users = set()  # –•—Ä–∞–Ω–∏–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(lambda message: message.text == "/start")
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ Railway! üöÄ")
    
# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(lambda message: message.text == "/help")
async def help(message: types.Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n/help - –ü–æ–º–æ—â—å")

# –ö–æ–º–∞–Ω–¥–∞ /login
@dp.message(lambda message: message.text.startswith("/login"))
async def login(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if message.from_user.id in logged_in_users:
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

    @dp.message(lambda msg: msg.from_user.id == message.from_user.id)
    async def ask_password(msg: types.Message):
        username = msg.text
        user = User.query.filter_by(username=username).first()

        if user:
            await msg.answer(f"–ü–∞—Ä–æ–ª—å –¥–ª—è {username}:")
            
            @dp.message(lambda msg: msg.from_user.id == message.from_user.id)
            async def verify_password(password_msg: types.Message):
                password = password_msg.text
                user = User.query.filter_by(username=username).first()
                
                if user and user.password == password:
                    logged_in_users.add(msg.from_user.id)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
                    await password_msg.answer(f"–ü—Ä–∏–≤–µ—Ç, {username}! –¢—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è!")
                else:
                    await password_msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        else:
            await msg.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—ç—Ö–æ-–±–æ—Ç)
@dp.message()
async def echo(message: types.Message):
    if message.from_user.id not in logged_in_users:
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login")
    else:
        await message.answer(f"–¢—ã —Å–∫–∞–∑–∞–ª: {message.text}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user = User.query.filter_by(username=username).first()
        if existing_user:
            return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(username=username, password=password)
        db.session.add(new_user)
        db.session.commit()
        return redirect(url_for('login'))  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login_view():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
        user = User.query.filter_by(username=username).first()
        if user and user.password == password:
            return '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!'
        else:
            return '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å!'
    
    return render_template('login.html')

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    with app.app_context():
        db.create_all()

    asyncio.run(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run(debug=True)  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
