import asyncio
import os
from aiogram import Bot, Dispatcher, types

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway
TOKEN = os.getenv("TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not TOKEN:
    raise ValueError("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞! –î–æ–±–∞–≤—å –µ–≥–æ –≤ Railway.")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(lambda message: message.text == "/start")
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ Railway! üöÄ")

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(lambda message: message.text == "/help")
async def help(message: types.Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n/help - –ü–æ–º–æ—â—å")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—ç—Ö–æ-–±–æ—Ç)
@dp.message()
async def echo(message: types.Message):
    await message.answer(f"–¢—ã —Å–∫–∞–∑–∞–ª: {message.text}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
